#! /usr/bin/env python
# -*- coding: utf-8 -*-

# # # # # # # # # # # # # # # # # # # # # # # #
#	TRADUCTORES E INTERPRETADORES CI3725      #
#	Primera entrega del proyecto.             #
#   Lexer para el lenguaje Setlan             #
#	Autores: Carlos Martínez 	- 11-10584    #
#			 Christian Teixeira - 11-11016    #
# # # # # # # # # # # # # # # # # # # # # # # #

import sl_lexer, sl_parser

# main del programa

def getcol(lineas, token):
	aux = 0
	for i in range(token.lineno-1):
		aux = aux + len(lineas[i])
	return str(token.lexpos - aux + 1)

def main(argv  = None):
	import sys
	if(argv is None):
		argv = sys.argv
	if(len(argv) == 1):
		print("ERROR: No se encontró argumento.\nUso: ./setlan [Nombre_Archivo] [-t -a -s]\nPor favor verifíque que el archivo existe en su directorio y está correctamente escrito.")
		exit(1)
	if argv[1][0] == "-":
		print("ERROR: Primer argumento debe ser el nombre del archivo, no un flag.")
		exit(1)

	global error_lex
	global error_par
	error_lex = []
	error_par = []
	out = []

	nombreArchivo = argv[1]
	archivo = open(nombreArchivo, "r")
	lineas = archivo.readlines()
	archivo.seek(0)
	contenido = archivo.read()

	lexer = sl_lexer.build_lexer(contenido)
	error_lex = sl_lexer.get_errors()

	# parser = sl_parser.build_parser()
	# error_par = sl_parser.get_errors()

	# Loop para extraer tokens correctos

	while True:
		tok = lexer.token()
		if not tok: break
		out.append(tok)		# Se incluyen en la lista de out

	# Imprimir resultados
	if len(error_lex) == 0:	# Lista de error vacía, se imprimen los tokens correctos
		if "-t" in argv:
			print("Tokens list\n")
			for t in out:
				if(t.type == "IDENTIFIER" or t.type == "SETSUBSTRACT" or t.type == "GREATERTHAN"):
					print("token " + str(t.type) + "\tvalue (" + str(t.value) + ") at line " + str(t.lineno) + ", column " + getcol(lineas, t))
				else:
					print("token " + str(t.type) + "\t\tvalue (" + str(t.value) + ") at line " + str(t.lineno) + ", column " + getcol(lineas, t))
	else:				# Lista de error no vacía, se imprimen solo los tokens de error encontrados
		for t in error_lex:
			print("Error: Se encontró un caracter inesperado \"" + t.value[0] + "\" en la Línea " + str(t.lineno) + ", Columna " + getcol(lineas, t) + ".")
			exit(0)
	parser = sl_parser.build_parser()
	ast = parser.parse(contenido)
	if "-a" in argv:
		print("\nAST\n")
		print(ast)

	if "-s" in argv:
		print("Symbol Table\n")


if __name__ == "__main__":
	main()